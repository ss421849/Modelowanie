/** Plik łączący istniejące komórki IAFCells połączeniami typu NetCon
 *      dla każdego możliwego połączenia (bez pętelek) mamy PICK_PROBABILITY
 *      (patrz constants.hoc) szans, że będzie ono obecne. Opóźnienie w
 *      przesyle jest zależne od odległości między komórkami.
 *
 *      Tworzymy, również losowe wejście dla komórek pobudzających.
 */

// Łączymy komórki losowo
objref NetConsList
objref netcon
prob.uniform(0, 1) //<- ustaw rodzaj losowania
NetConsList = new List()

for i = 0, TOTAL_CELLS - 1 {
    for j = 0, TOTAL_CELLS - 1 {
        if (i != j) {
            dist = sqrt(                            \
                    (neurons[i].x - neurons[j].x)^2 +   \
                    (neurons[i].y - neurons[j].y)^2 +   \
                    (neurons[i].z - neurons[j].z)^2     \
                )

            p = prob.repick() //<- i am speed
            // Połączenie z "jakiej" do "jakiej"
            if (is_inhibitory[i] == IS_INHIBITORY && is_inhibitory[j] == IS_INHIBITORY){
                if (p <= II_PICK_PROBABILITY){
                    netcon = new NetCon(neurons[i].IAF, neurons[j].IAF, \
                        II_IAF_NETCON_THRESHOLD,                \
                        II_IAF_NETCON_BASE_DELAY*dist,          \
                        II_IAF_NETCON_WEIGHT                    \
                    )
                    NetConsList.append(netcon)
                    neurons[i].addConnection(neurons[j].x, neurons[j].y, neurons[j].z)
                }
            } else if (is_inhibitory[i] == IS_INHIBITORY && is_inhibitory[j] == NOT_INHIBITORY){
                if (p <= IE_PICK_PROBABILITY){
                    netcon = new NetCon(neurons[i].IAF, neurons[j].IAF, \
                        IE_IAF_NETCON_THRESHOLD,                \
                        IE_IAF_NETCON_BASE_DELAY*dist,          \
                        IE_IAF_NETCON_WEIGHT                    \
                    )
                    NetConsList.append(netcon)
                    neurons[i].addConnection(neurons[j].x, neurons[j].y, neurons[j].z)
                }
            } else if (is_inhibitory[i] == NOT_INHIBITORY && is_inhibitory[j] == IS_INHIBITORY){
                if (p <= EI_PICK_PROBABILITY){
                    netcon = new NetCon(neurons[i].IAF, neurons[j].IAF, \
                        EI_IAF_NETCON_THRESHOLD,                \
                        EI_IAF_NETCON_BASE_DELAY*dist,          \
                        EI_IAF_NETCON_WEIGHT                    \
                    )
                    NetConsList.append(netcon)
                    neurons[i].addConnection(neurons[j].x, neurons[j].y, neurons[j].z)
                }
            } else {// is_inhibitory[i] == NOT_INHIBITORY && is_inhibitory[j] == NOT_INHIBITORY
                if (p <= EE_PICK_PROBABILITY){
                    netcon = new NetCon(neurons[i].IAF, neurons[j].IAF, \
                        EE_IAF_NETCON_THRESHOLD,                \
                        EE_IAF_NETCON_BASE_DELAY*dist,          \
                        EE_IAF_NETCON_WEIGHT                    \
                    )
                    NetConsList.append(netcon)
                    neurons[i].addConnection(neurons[j].x, neurons[j].y, neurons[j].z)
                }
            }
        }
    }
}

// Komórki pobudzające otrzymują zewnętrzne pobudzenie
objref Stims[EXCITATORY_CELLS]
objref Inputs[EXCITATORY_CELLS]
k = 0
for i = 0, TOTAL_CELLS - 1 {
    if (is_inhibitory[i] == NOT_INHIBITORY){
        Stims[k] = new NetStim(0.5)
        Stims[k].start = EXCITATORY_STIM_TRIGGER_START
        Stims[k].interval = EXCITATORY_STIM_TRIGGER_INTERVAL
        Stims[k].number = EXCITATORY_STIM_TRIGGER_NUMBER
        Stims[k].noise = EXCITATORY_STIM_TRIGGER_NOISE

        Inputs[k] = new NetCon(Stims[k], neurons[i].IAF, EXCITATORY_INPUT_NETCON_THRESHOLD, EXCITATORY_INPUT_NETCON_BASE_DELAY, EXCITATORY_INPUT_NETCON_WEIGHT)
        k = k + 1
    }
}