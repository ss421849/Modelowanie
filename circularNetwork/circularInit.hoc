/**
 * Symulacje uruchamiamy poleceniem "go()"
 */
load_file("nrngui.hoc")
objref NULL


objref ShapeWindow
proc shape(){
    ShapeWindow = new PlotShape()
    ShapeWindow.show(0)
    ShapeWindow.scale(-1, 1)
    //ShapeWindow.view(-5.5, -5.5, 11, 11, 540, 360, 1080, 720)
    ShapeWindow.exec_menu("Shape Plot")

    fast_flush_list.append(ShapeWindow)
}


//----------------------------------------------------------------------------
// Tylko jednen zestaw stałych powinien być odkomentowany
//----------------------------------------------------------------------------
xopen("constants.hoc")
// xopen("examples/noise.hoc")
// xopen("examples/burst_period.hoc")
// xopen("examples/firm_period.hoc")
// xopen("examples/smooth_period.hoc")
// xopen("examples/extra_smooth_period.hoc")

//----------------------------------------------------------------------------
xopen("addGraphs.hoc")
xopen("neuronIAF.hoc")
xopen("createNetworkCells.hoc")
xopen("createConnections.hoc")
xopen("networkRasterGraph.hoc")
xopen("counter.hoc")

//----------------------------------------------------------------------------
// Zmiana podstawowej funkcji 'step()' na potrzeby ShapePlot'u
//----------------------------------------------------------------------------

proc step() { local i
    for i=1, nstep_steprun { 
        advance()
    }
    Plot()
    //-------------ustawiamy sztucznie napięcie na wartość IAF.M--------------
    for i=0, TOTAL_CELLS - 1 {
        neurons[i].soma.v(0.5) = neurons[i].IAF.M
    }
}


//----------------------------------------------------------------------------
// dodatkowe wykresy
//----------------------------------------------------------------------------

shape()
addgraph("neurons[12].IAF.M", -1, 1)
addgraph("neurons[random_inhibitory_cell_id].IAF.M", -1, 1)

//----------------------------------------------------------------------------
// procedura go
//----------------------------------------------------------------------------
proc go() {
    init()
    run()
    idvec.mark(rasterGraph, timevec, "|")
    ivec.mark(rasterGraph, tvec, "S")
    countSpikes()
    if (PRINT_INPUT_RASTER_GRAPH) {idvecIN.mark(rasterGraphIN, timevecIN, "|")}
}

nrncontrolmenu()
